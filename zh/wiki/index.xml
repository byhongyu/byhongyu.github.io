<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wiki | 中文版</title>
    <link>/zh/wiki/</link>
      <atom:link href="/zh/wiki/index.xml" rel="self" type="application/rss+xml" />
    <description>Wiki</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><lastBuildDate>Sat, 19 Oct 2019 21:12:38 -0700</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Wiki</title>
      <link>/zh/wiki/</link>
    </image>
    
    <item>
      <title>Use Jupyter in Venv</title>
      <link>/zh/wiki/use-jupyter-in-venv/</link>
      <pubDate>Sat, 19 Oct 2019 21:12:38 -0700</pubDate>
      <guid>/zh/wiki/use-jupyter-in-venv/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ python -m venv projectname
$ source projectname/bin/activate
(venv) $ pip install ipykernel
(venv) $ ipython kernel install --user --name=projectname
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Install Virtualenvwrapper</title>
      <link>/zh/wiki/install-virtualenvwrapper/</link>
      <pubDate>Sat, 19 Oct 2019 20:51:57 -0700</pubDate>
      <guid>/zh/wiki/install-virtualenvwrapper/</guid>
      <description>&lt;p&gt;&lt;em&gt;TL;DR&lt;/em&gt; excerpt from 
&lt;a href=&#34;https://virtualenvwrapper.readthedocs.io/en/latest/install.html#basic-installation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;virtualenvwrapper doc webpage&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install virtualenvwrapper
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An alternative to installing it into the global site-packages is to add it to 
&lt;a href=&#34;https://docs.python.org/install/index.html#alternate-installation-the-user-scheme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;your user local directory&lt;/a&gt; (usually ~/.local).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install --user virtualenvwrapper
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;important-shell-startup-file&#34;&gt;Important: Shell Startup File&lt;/h2&gt;
&lt;p&gt;Add three lines to your shell startup file (&lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.profile&lt;/code&gt;, etc.) to set the location where the virtual environments should live, the location of your development project directories, and the location of the script installed with this package:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/Devel
source /usr/local/bin/virtualenvwrapper.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;Quick-Start&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Run: &lt;code&gt;workon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A list of environments, empty, is printed.&lt;/li&gt;
&lt;li&gt;Run: &lt;code&gt;mkvirtualenv temp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A new environment, &lt;code&gt;temp&lt;/code&gt; is created and activated.&lt;/li&gt;
&lt;li&gt;Run: &lt;code&gt;workon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This time, the &lt;code&gt;temp&lt;/code&gt; environment is included.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>giterror: &#39;src refspec master does not match any&#39;</title>
      <link>/zh/wiki/git_error_refspec-master-doesnt-match-any/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/zh/wiki/git_error_refspec-master-doesnt-match-any/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Q: Message &amp;lsquo;src refspec master does not match any&amp;rsquo; when pushing commits in Git&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A： Maybe you just need to commit:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir repo &amp;amp;&amp;amp; cd repo
git remote add origin /path/to/origin.git
git add .
# Oops! Never committed!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;$error: src refspec master does not match any.$&lt;/p&gt;
&lt;p&gt;to solve:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -m &amp;quot;initial commit&amp;quot;
git push origin master
Success!
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>gitkeep</title>
      <link>/zh/wiki/gitkeep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/zh/wiki/gitkeep/</guid>
      <description>&lt;p&gt;&lt;code&gt;.gitkeep&lt;/code&gt; isn’t documented, because it’s not a feature of Git.&lt;/p&gt;
&lt;p&gt;Git 
&lt;a href=&#34;https://git.wiki.kernel.org/index.php/Git_FAQ#Can_I_add_empty_directories.3F&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cannot add a completely empty directory&lt;/a&gt;. People who want to track empty directories in Git have created the convention of putting files called &lt;code&gt;.gitkeep&lt;/code&gt; in these directories. The file could be called anything; Git assigns no special significance to this name.&lt;/p&gt;
&lt;p&gt;There is a competing convention of adding a &lt;code&gt;.gitignore&lt;/code&gt; file to the empty directories to get them tracked, but some people see this as confusing since the goal is to keep the empty directories, not ignore them; &lt;code&gt;.gitignore&lt;/code&gt; is also used to list files that should be ignored by Git when looking for untracked files.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
