[{"authors":["hong"],"categories":null,"content":"","date":1571543517,"expirydate":-62135596800,"kind":"term","lang":"zh","lastmod":1571543517,"objectID":"e6bc4898ce681eb7bd4ca8a98cf0a6d9","permalink":"/zh/authors/hong/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/zh/authors/hong/","section":"authors","summary":"","tags":null,"title":"","type":"authors"},{"authors":["admin"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"zh","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/zh/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/zh/authors/admin/","section":"authors","summary":"","tags":null,"title":"","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"622a71a4a37a399862f2b21f27967839","permalink":"/zh/post/tsa/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/zh/post/tsa/","section":"post","summary":"","tags":null,"title":"TSA","type":"post"},{"authors":[],"categories":[],"content":"$ python -m venv projectname\r$ source projectname/bin/activate\r(venv) $ pip install ipykernel\r(venv) $ ipython kernel install --user --name=projectname\r ","date":1571544758,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1571544758,"objectID":"d326ad3e0516f03ebc804f1ee59658f0","permalink":"/zh/wiki/use-jupyter-in-venv/","publishdate":"2019-10-19T21:12:38-07:00","relpermalink":"/zh/wiki/use-jupyter-in-venv/","section":"wiki","summary":"$ python -m venv projectname\r$ source projectname/bin/activate\r(venv) $ pip install ipykernel\r(venv) $ ipython kernel install --user --name=projectname\r ","tags":[],"title":"Use Jupyter in Venv","type":"wiki"},{"authors":[""],"categories":[],"content":"TL;DR excerpt from virtualenvwrapper doc webpage\npip install virtualenvwrapper\r An alternative to installing it into the global site-packages is to add it to your user local directory (usually ~/.local).\npip install --user virtualenvwrapper\r Important: Shell Startup File Add three lines to your shell startup file (.bashrc, .profile, etc.) to set the location where the virtual environments should live, the location of your development project directories, and the location of the script installed with this package:\nexport WORKON_HOME=$HOME/.virtualenvs\rexport PROJECT_HOME=$HOME/Devel\rsource /usr/local/bin/virtualenvwrapper.sh\r Quick-Start  Run: workon A list of environments, empty, is printed. Run: mkvirtualenv temp A new environment, temp is created and activated. Run: workon This time, the temp environment is included.  ","date":1571543517,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1571543517,"objectID":"9c7803c0567b9684d1f9ab40108f278b","permalink":"/zh/wiki/install-virtualenvwrapper/","publishdate":"2019-10-19T20:51:57-07:00","relpermalink":"/zh/wiki/install-virtualenvwrapper/","section":"wiki","summary":"TL;DR excerpt from virtualenvwrapper doc webpage\npip install virtualenvwrapper\r An alternative to installing it into the global site-packages is to add it to your user local directory (usually ~/.local).\npip install --user virtualenvwrapper\r Important: Shell Startup File Add three lines to your shell startup file (.bashrc, .profile, etc.) to set the location where the virtual environments should live, the location of your development project directories, and the location of the script installed with this package:","tags":["wiki","how-to"],"title":"Install Virtualenvwrapper","type":"wiki"},{"authors":[""],"categories":[],"content":"Writing is hard What mark do you want to leave beyond your daily work?\nI do want to improve my photography skills, but I\u0026rsquo;m not\nDrawing, writing, public speaking are\nFor the coming 100 days, I\n","date":1570862599,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1570862599,"objectID":"f7610d866cf6a1ecdb21b5e3d03a4030","permalink":"/zh/100-days-challenge/day00/","publishdate":"2019-10-11T23:43:19-07:00","relpermalink":"/zh/100-days-challenge/day00/","section":"100-days-challenge","summary":"Writing is hard What mark do you want to leave beyond your daily work?\nI do want to improve my photography skills, but I\u0026rsquo;m not\nDrawing, writing, public speaking are\nFor the coming 100 days, I","tags":[],"title":"Day00","type":"100-days-challenge"},{"authors":null,"categories":null,"content":"Anomaly detection in time series data ","date":1570819843,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1570819843,"objectID":"bdcc86bd5554e482f13aeb3398b858d8","permalink":"/zh/post/post1/","publishdate":"2019-10-11T11:50:43-07:00","relpermalink":"/zh/post/post1/","section":"post","summary":"Anomaly detection in time series data ","tags":null,"title":"Post1","type":"post"},{"authors":null,"categories":null,"content":"Why Vowpal Wabbit?\nVowpal Wabbit is a machine learning system which pushes the frontier of machine learning with techniques such as online, hashing, allreduce, reductions, learning2search, active, and interactive learning. There is a specific focus on reinforcement learning with several contextual bandit algorithms implemented and the online nature lending to the problem well. Vowpal Wabbit is a destination for implementing and maturing state of the art algorithms with performance in mind.\nhttps://github.com/VowpalWabbit/vowpal_wabbit/wiki/Examples\nhttp://users.umiacs.umd.edu/~hal/tmp/multiclassVW.html\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"08ae9be61a3424700cec3d18861351ce","permalink":"/zh/daily/20191027/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/zh/daily/20191027/","section":"daily","summary":"Why Vowpal Wabbit?\nVowpal Wabbit is a machine learning system which pushes the frontier of machine learning with techniques such as online, hashing, allreduce, reductions, learning2search, active, and interactive learning. There is a specific focus on reinforcement learning with several contextual bandit algorithms implemented and the online nature lending to the problem well. Vowpal Wabbit is a destination for implementing and maturing state of the art algorithms with performance in mind.","tags":null,"title":"","type":"daily"},{"authors":null,"categories":null,"content":"https://12factor.net/zh_cn/build-release-run\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"1f01f13f9a868704db5ee77d6b22e467","permalink":"/zh/interesting-reads/interesting-reads/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/zh/interesting-reads/interesting-reads/","section":"interesting-reads","summary":"https://12factor.net/zh_cn/build-release-run","tags":null,"title":"","type":"interesting-reads"},{"authors":null,"categories":null,"content":"Keep secrets and configuration out of version control You really don\u0026rsquo;t want to leak your AWS secret key or Postgres username and password on Github. Enough said — see the Twelve Factor App principles on this point. Here\u0026rsquo;s one way to do this:\nStore your secrets and config variables in a special file Create a .env file in the project root folder. Thanks to the .gitignore, this file should never get committed into the version control repository. Here\u0026rsquo;s an example:\nexample .env file DATABASE_URL=postgres://username:password@localhost:5432/dbname AWS_ACCESS_KEY=myaccesskey AWS_SECRET_ACCESS_KEY=mysecretkey OTHER_VARIABLE=something Use a package to load these variables automatically. If you look at the stub script in src/data/make_dataset.py, it uses a package called python-dotenv to load up all the entries in this file as environment variables so they are accessible with os.environ.get. Here\u0026rsquo;s an example snippet adapted from the python-dotenv documentation:\n# src/data/dotenv_example.py\rimport os\rfrom dotenv import load_dotenv, find_dotenv\r# find .env automagically by walking up directories until it's found\rdotenv_path = find_dotenv()\r# load up the entries as environment variables\rload_dotenv(dotenv_path)\rdatabase_url = os.environ.get(\u0026quot;DATABASE_URL\u0026quot;)\rother_variable = os.environ.get(\u0026quot;OTHER_VARIABLE\u0026quot;)\r AWS CLI configuration When using Amazon S3 to store data, a simple method of managing AWS access is to set your access keys to environment variables. However, managing mutiple sets of keys on a single machine (e.g. when working on multiple projects) it is best to use a credentials file, typically located in ~/.aws/credentials. A typical file might look like:\n[default]\raws_access_key_id=myaccesskey\raws_secret_access_key=mysecretkey\r[another_project]\raws_access_key_id=myprojectaccesskey\raws_secret_access_key=myprojectsecretkey\r You can add the profile name when initialising a project; assuming no applicable environment variables are set, the profile credentials will be used be default.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"efd29d0a69e5c510b966ec364d8a971a","permalink":"/zh/interesting-reads/keep-secrets-and-configuration-out-of-version-control/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/zh/interesting-reads/keep-secrets-and-configuration-out-of-version-control/","section":"interesting-reads","summary":"Keep secrets and configuration out of version control You really don\u0026rsquo;t want to leak your AWS secret key or Postgres username and password on Github. Enough said — see the Twelve Factor App principles on this point. Here\u0026rsquo;s one way to do this:\nStore your secrets and config variables in a special file Create a .env file in the project root folder. Thanks to the .gitignore, this file should never get committed into the version control repository.","tags":null,"title":"","type":"interesting-reads"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"dd178acded7fc10b1c908d1ebe4b64d8","permalink":"/zh/post/tsa1/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/zh/post/tsa1/","section":"post","summary":"","tags":null,"title":"","type":"page"},{"authors":null,"categories":null,"content":" Q: Message \u0026lsquo;src refspec master does not match any\u0026rsquo; when pushing commits in Git\n A： Maybe you just need to commit:\nmkdir repo \u0026amp;\u0026amp; cd repo\rgit remote add origin /path/to/origin.git\rgit add .\r# Oops! Never committed!\r git push -u origin master\r $error: src refspec master does not match any.$\nto solve:\ngit commit -m \u0026quot;initial commit\u0026quot;\rgit push origin master\rSuccess!\r ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"26a08ea498ec374c7e359c6b3c829bcc","permalink":"/zh/wiki/git_error_refspec-master-doesnt-match-any/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/zh/wiki/git_error_refspec-master-doesnt-match-any/","section":"wiki","summary":" Q: Message \u0026lsquo;src refspec master does not match any\u0026rsquo; when pushing commits in Git\n A： Maybe you just need to commit:\nmkdir repo \u0026amp;\u0026amp; cd repo\rgit remote add origin /path/to/origin.git\rgit add .\r# Oops! Never committed!\r git push -u origin master\r $error: src refspec master does not match any.$\nto solve:\ngit commit -m \u0026quot;initial commit\u0026quot;\rgit push origin master\rSuccess!\r ","tags":null,"title":"giterror: 'src refspec master does not match any'","type":"wiki"},{"authors":null,"categories":null,"content":".gitkeep isn’t documented, because it’s not a feature of Git.\nGit cannot add a completely empty directory. People who want to track empty directories in Git have created the convention of putting files called .gitkeep in these directories. The file could be called anything; Git assigns no special significance to this name.\nThere is a competing convention of adding a .gitignore file to the empty directories to get them tracked, but some people see this as confusing since the goal is to keep the empty directories, not ignore them; .gitignore is also used to list files that should be ignored by Git when looking for untracked files.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"e95d4ceaeb3b384eafe975f9c8230473","permalink":"/zh/wiki/gitkeep/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/zh/wiki/gitkeep/","section":"wiki","summary":".gitkeep isn’t documented, because it’s not a feature of Git.\nGit cannot add a completely empty directory. People who want to track empty directories in Git have created the convention of putting files called .gitkeep in these directories. The file could be called anything; Git assigns no special significance to this name.\nThere is a competing convention of adding a .gitignore file to the empty directories to get them tracked, but some people see this as confusing since the goal is to keep the empty directories, not ignore them; .","tags":null,"title":"gitkeep","type":"wiki"}]